diff --git a/src/detector.c b/src/detector.c
index b69d21f..543dab8 100644
--- a/src/detector.c
+++ b/src/detector.c
@@ -580,20 +580,56 @@ void validate_detector_recall(char *cfgfile, char *weightfile)
     }
 }
 
+void print_results(char *input, image im, int num, float thresh, box *boxes, float **probs, char **names, image **alphabet, int classes)
+{
+    int i;
+    for(i = 0; i < num; ++i){
+        int class = max_index(probs[i], classes);
+        float prob = probs[i][class];
+        if(prob > thresh){
+            box b = boxes[i];
+            int left  = (b.x-b.w/2.)*im.w;
+            int right = (b.x+b.w/2.)*im.w;
+            int top   = (b.y-b.h/2.)*im.h;
+            int bot   = (b.y+b.h/2.)*im.h;
+
+            if(left < 0) left = 0;
+            if(right > im.w-1) right = im.w-1;
+            if(top < 0) top = 0;
+            if(bot > im.h-1) bot = im.h-1;
+
+            printf("{ \"filename\": \"%s\", \"class\": \"%s\", \"probability\": %f, \"left\": %d, \"top\": %d, \"right\": %d, \"bottom\": %d }\n",
+                input,
+                names[class],
+                prob,
+                left,
+                top,
+                right,
+                bot
+            );
+        }
+    }
+    printf("detection done:%s\n", input);
+}
+
+
 void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh, float hier_thresh, char *outfile, int fullscreen)
 {
     list *options = read_data_cfg(datacfg);
     char *name_list = option_find_str(options, "names", "data/names.list");
     char **names = get_labels(name_list);
+    clock_t time;
 
+    time=clock();
     image **alphabet = load_alphabet();
     network net = parse_network_cfg(cfgfile);
     if(weightfile){
         load_weights(&net, weightfile);
     }
     set_batch_network(&net, 1);
+    printf("Loaded network in %f seconds.\n", sec(clock()-time));
+
     srand(2222222);
-    clock_t time;
     char buff[256];
     char *input = buff;
     int j;
@@ -605,7 +641,7 @@ void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filenam
             printf("Enter Image Path: ");
             fflush(stdout);
             input = fgets(input, 256, stdin);
-            if(!input) return;
+            if(!input) break;
             strtok(input, "\n");
         }
         image im = load_image_color(input,0,0);
@@ -627,22 +663,11 @@ void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filenam
         get_region_boxes(l, im.w, im.h, net.w, net.h, thresh, probs, boxes, 0, 0, hier_thresh, 1);
         if (nms) do_nms_obj(boxes, probs, l.w*l.h*l.n, l.classes, nms);
         //else if (nms) do_nms_sort(boxes, probs, l.w*l.h*l.n, l.classes, nms);
-        draw_detections(im, l.w*l.h*l.n, thresh, boxes, probs, names, alphabet, l.classes);
-        if(outfile){
-            save_image(im, outfile);
-        }
-        else{
-            save_image(im, "predictions");
-#ifdef OPENCV
-            cvNamedWindow("predictions", CV_WINDOW_NORMAL); 
-            if(fullscreen){
-                cvSetWindowProperty("predictions", CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);
-            }
-            show_image(im, "predictions");
-            cvWaitKey(0);
-            cvDestroyAllWindows();
-#endif
-        }
+
+
+        //print results
+        printf("Results: \n");
+        print_results(input, im, l.w*l.h*l.n, thresh, boxes, probs, names, alphabet, l.classes);
 
         free_image(im);
         free_image(sized);
